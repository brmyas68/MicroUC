// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/uc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UCServiceClient is the client API for UCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UCServiceClient interface {
	Login(ctx context.Context, in *RequestLogin, opts ...grpc.CallOption) (*ResponseLogin, error)
	Permission(ctx context.Context, in *RequestEmpty, opts ...grpc.CallOption) (*ResponsePermission, error)
	GetUser(ctx context.Context, in *RequestEmpty, opts ...grpc.CallOption) (*ResponseUser, error)
	GetAllUser(ctx context.Context, in *RequestEmpty, opts ...grpc.CallOption) (UCService_GetAllUserClient, error)
	LogOut(ctx context.Context, in *RequestEmpty, opts ...grpc.CallOption) (*ResponseLogOut, error)
	InsertUser(ctx context.Context, in *RequestInsert, opts ...grpc.CallOption) (*ResponseInsert, error)
}

type uCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUCServiceClient(cc grpc.ClientConnInterface) UCServiceClient {
	return &uCServiceClient{cc}
}

func (c *uCServiceClient) Login(ctx context.Context, in *RequestLogin, opts ...grpc.CallOption) (*ResponseLogin, error) {
	out := new(ResponseLogin)
	err := c.cc.Invoke(ctx, "/UCService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uCServiceClient) Permission(ctx context.Context, in *RequestEmpty, opts ...grpc.CallOption) (*ResponsePermission, error) {
	out := new(ResponsePermission)
	err := c.cc.Invoke(ctx, "/UCService/Permission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uCServiceClient) GetUser(ctx context.Context, in *RequestEmpty, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, "/UCService/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uCServiceClient) GetAllUser(ctx context.Context, in *RequestEmpty, opts ...grpc.CallOption) (UCService_GetAllUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &UCService_ServiceDesc.Streams[0], "/UCService/GetAllUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &uCServiceGetAllUserClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UCService_GetAllUserClient interface {
	Recv() (*ResponseAllUser, error)
	grpc.ClientStream
}

type uCServiceGetAllUserClient struct {
	grpc.ClientStream
}

func (x *uCServiceGetAllUserClient) Recv() (*ResponseAllUser, error) {
	m := new(ResponseAllUser)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uCServiceClient) LogOut(ctx context.Context, in *RequestEmpty, opts ...grpc.CallOption) (*ResponseLogOut, error) {
	out := new(ResponseLogOut)
	err := c.cc.Invoke(ctx, "/UCService/LogOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uCServiceClient) InsertUser(ctx context.Context, in *RequestInsert, opts ...grpc.CallOption) (*ResponseInsert, error) {
	out := new(ResponseInsert)
	err := c.cc.Invoke(ctx, "/UCService/InsertUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UCServiceServer is the server API for UCService service.
// All implementations must embed UnimplementedUCServiceServer
// for forward compatibility
type UCServiceServer interface {
	Login(context.Context, *RequestLogin) (*ResponseLogin, error)
	Permission(context.Context, *RequestEmpty) (*ResponsePermission, error)
	GetUser(context.Context, *RequestEmpty) (*ResponseUser, error)
	GetAllUser(*RequestEmpty, UCService_GetAllUserServer) error
	LogOut(context.Context, *RequestEmpty) (*ResponseLogOut, error)
	InsertUser(context.Context, *RequestInsert) (*ResponseInsert, error)
	//mustEmbedUnimplementedUCServiceServer()
}

// UnimplementedUCServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUCServiceServer struct {
}

func (UnimplementedUCServiceServer) Login(context.Context, *RequestLogin) (*ResponseLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUCServiceServer) Permission(context.Context, *RequestEmpty) (*ResponsePermission, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Permission not implemented")
}
func (UnimplementedUCServiceServer) GetUser(context.Context, *RequestEmpty) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedUCServiceServer) GetAllUser(*RequestEmpty, UCService_GetAllUserServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllUser not implemented")
}
func (UnimplementedUCServiceServer) LogOut(context.Context, *RequestEmpty) (*ResponseLogOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogOut not implemented")
}
func (UnimplementedUCServiceServer) InsertUser(context.Context, *RequestInsert) (*ResponseInsert, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertUser not implemented")
}
//func (UnimplementedUCServiceServer) mustEmbedUnimplementedUCServiceServer() {}

// UnsafeUCServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UCServiceServer will
// result in compilation errors.
type UnsafeUCServiceServer interface {
//	mustEmbedUnimplementedUCServiceServer()
}

func RegisterUCServiceServer(s grpc.ServiceRegistrar, srv UCServiceServer) {
	s.RegisterService(&UCService_ServiceDesc, srv)
}

func _UCService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UCServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UCService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UCServiceServer).Login(ctx, req.(*RequestLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _UCService_Permission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UCServiceServer).Permission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UCService/Permission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UCServiceServer).Permission(ctx, req.(*RequestEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UCService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UCServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UCService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UCServiceServer).GetUser(ctx, req.(*RequestEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UCService_GetAllUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestEmpty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UCServiceServer).GetAllUser(m, &uCServiceGetAllUserServer{stream})
}

type UCService_GetAllUserServer interface {
	Send(*ResponseAllUser) error
	grpc.ServerStream
}

type uCServiceGetAllUserServer struct {
	grpc.ServerStream
}

func (x *uCServiceGetAllUserServer) Send(m *ResponseAllUser) error {
	return x.ServerStream.SendMsg(m)
}

func _UCService_LogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEmpty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UCServiceServer).LogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UCService/LogOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UCServiceServer).LogOut(ctx, req.(*RequestEmpty))
	}
	return interceptor(ctx, in, info, handler)
}

func _UCService_InsertUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestInsert)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UCServiceServer).InsertUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UCService/InsertUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UCServiceServer).InsertUser(ctx, req.(*RequestInsert))
	}
	return interceptor(ctx, in, info, handler)
}

// UCService_ServiceDesc is the grpc.ServiceDesc for UCService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UCService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UCService",
	HandlerType: (*UCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UCService_Login_Handler,
		},
		{
			MethodName: "Permission",
			Handler:    _UCService_Permission_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _UCService_GetUser_Handler,
		},
		{
			MethodName: "LogOut",
			Handler:    _UCService_LogOut_Handler,
		},
		{
			MethodName: "InsertUser",
			Handler:    _UCService_InsertUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllUser",
			Handler:       _UCService_GetAllUser_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/uc.proto",
}
